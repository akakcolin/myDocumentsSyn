;;;;;
title: Python与fortran混合使用
tags: Fortran, Python
date: 2021-1-24 10:53:04
format: md
;;;;;

# Python与fortran混合使用

选择python做接口解析，数值计算部分采用fortran来实现的时候，
我们可以利用python/c的接口来实现，不过这需要对f90再做个wrap，这样有点麻烦，更好的方式是通过f2py来实现。

我们用分子动力学里的经典LJ对势，写个F90函数计算原子体系的能量和力，用f2py生成库，然后在python中调用这个库函数

## 简单复习一下lj势函数：

原子体系的总能等于原子对势之和
$$
\begin{equation}
U = \sum_{i \lt j} u(r_{ij})
\end{equation}
$$

$$
\begin{equation}
u(r_{ij})=4 \epsilon [(\frac{r_{ij}}{\sigma})^{-12} - (\frac{r_{ij}}{\sigma})^{-6}]
\end{equation}
$$

那么原子在x方向上的力就是：

$$
\begin{aligned}
F_{i, x} &=-\frac{\partial U}{\partial x_{i}} \\
&=-\frac{\partial}{\partial x_{i}} \sum_{j \neq i} u\left(r_{i j}\right) \\
&=-\sum_{j \neq i} \frac{\partial r_{i j}}{\partial x_{i}} \frac{\partial}{\partial r_{i j}} u_{12}\left(r_{i j}\right)
\end{aligned}
$$

由 $ r_{ij}^2=(x_i - x_j)^2 + (y_i - y_j)^2 + (z_i+z_j)^2$， 我们有

$$
F_{i,x}= - \sum_(j \neq i)(\frac{x_i-x_j}{r_{ij}})\frac{\partial}{\partial r_{ij}} u(r_{ij})
$$ 

自然地我们得到3维情况下的力的公式，同时引入向量符号$r_ij = r_j - r_i$,

$$
\begin{aligned}
\mathbf{F}_{i} &=\sum_{j \neq i}\left(\frac{\mathbf{r}_{i j}}{r_{i j}}\right) \frac{\partial}{\partial r_{i j}} u\left(r_{i j}\right) \\
&=\sum_{j \neq i}\left(\frac{\mathbf{r}_{i j}}{r_{i j}}\right)\left(\frac{4 \epsilon}{\sigma}\right)\left[-12\left(\frac{r_{i j}}{\sigma}\right)^{-13}+6\left(\frac{r_{i j}}{\sigma}\right)^{-7}\right] \\
&=\sum_{j \neq i} \mathbf{r}_{i j}\left(\frac{\epsilon}{\sigma}\right)\left[-48\left(\frac{r_{i j}}{\sigma}\right)^{-14}+24\left(\frac{r_{i j}}{\sigma}\right)^{-8}\right]
\end{aligned}
$$

考虑周期性边界条件：每个原子只考虑临近的周围镜像的原子，这个通过找2个粒子之间的最近镜像距离来确定是哪个image
$$
r_{ij}^0 = r_{ij} - L nint(r_{ij}/L)
$$
L是盒子的长度，对于非正方盒子来讲 L是向量形式。

最后我们在对势函数中引入一个截断距离$r_c$, 超过这个距离时势能为0。通常$r_c=2.5\sigma$或者更大值。

$$
u\left(r_{i j}\right)=\left\{\begin{array}{c}
4 \epsilon\left[\left(\frac{r_{i j}}{\sigma}\right)^{-12}-\left(\frac{r_{i j}}{\sigma}\right)^{-6}\right]-4 \epsilon\left[\left(\frac{r_{c}}{\sigma}\right)^{-12}-\left(\frac{r_{c}}{\sigma}\right)^{-6}\right] \quad r_{i j} \leq r_{c} \\
0 & r_{i j}>r_{c}
\end{array}\right.
$$
为了简化，我们采用无量纲单位来表示， 这样对势方程的形式为：
$$
u\left(r_{i j}\right)=\left\{\begin{array}{cl}
4\left[r_{i j}^{-12}-r_{ij}^{-6}\right]-4\left[r_{c}^{-12}-r_{c}^{-6}\right] & r_{i j} \leq r_{c} \\
0 & r_{i j}>r_{c}
\end{array}\right.
$$

**最终的fortran部分的实现代码，保存为ljlib.F90文件：**

![](https://static01.imgkr.com/temp/8dc6b144a4e54bd98abbb96dbcdd4ad4.png)


进入编译调试

```
 gfortran -c liblj.F90
```

看看代码有无报错，恩，应该是没有的，让我们继续

## 准备f2py前需要的知识点：

1. 如果fortran代码对所有的变量都有严格的类型定义，我们很少需要使用f2py对变量进行转换，不过对于带有intent(inout)属性的数组变量，需要添加!f2py 来告诉f2py我们想处理的数据类型;
   写成形式
   ```fortran
   !f2py intent(in,out) :: var 
   ```

2. 另外必须为所有输出参数明确指定尺寸！换句话说，输出自变量不能具有假定的大小或可分配的大小
   ```fortran
   integer, allocatable, intent(out) :: array1(:)  ! Not valid
   integer, intent(out)              :: array2(:)  ! Not valid
   integer, intent(out)              :: array3(10) ! Valid
   integer, intent(in)               :: array4(:)  ! Valid
   ```

3. 不支持派生类型

## 好的，开始运行f2py

根据上面的知识点，这里对ljlib.F90里的EnergyForces函数，添加一行
 
```fortran
  real(8), intent(inout), dimension(0:NAtom-1, 0:Dim-1) :: Forces
!f2py intent(in,out) :: Forces
```

对VVIntegral函数，添加一行!f2py

```fortran
 real(8), intent(inout), dimension(0:NAtom-1, 0:Dim-1) :: Pos, Vel, Accel
!f2py intent(in,out) :: Pos, Vel, Accel
```

命令行下运行

```python
 python -m numpy.f2py -c ljlib.F90 -m ljlib
```

在目录下会生成ljlib.cpythonxxx.so 的动态链接文件。

打开python解释器，导入这个ljlib模块

![](https://imgkr2.cn-bj.ufileos.com/70e46225-3ca3-401b-babc-5e06fd21a39d.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=WnKfMtUv9YrNpQaahIMDCnTlCcQ%253D&Expires=1611539154)

看看各个函数的接口

![](https://imgkr2.cn-bj.ufileos.com/cc8e72ac-360d-4e38-8766-f29a21ec35ef.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=HchIF2qI3Vp2OlLbTlfGHnxmrOA%253D&Expires=1611539434)

看起来python导入ljlib库完成了，f2py用起来还是很方便的吧


参考资料：
1. https://www.numfys.net/howto/F2PY/
2. https://sites.engineering.ucsb.edu/~shell/che210d/f2py.pdf
3. https://numpy.org/devdocs/f2py/usage.html​
